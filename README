h1. Joda-Time Plugin
The Joda-Time Plugin integrates the [Joda-Time|http://joda-time.sourceforge.net/] date/time library into Grails. The plugin...
 * Bundles the libraries necessary to use Joda Time types as persistent fields on domain classes.
 * Provides the ability to bind from form inputs to Joda Time fields on domain or command objects.
 * Supports JSON and XML rendering of Joda Time types.
 * Provides tag-libs for input and output of Joda Time data.
 * Enhances Grails' scaffolding to support domain classes with Joda Time fields.
 * Adds compatibility and consistency methods to Joda Time types so that they integrate better with Groovy.

h2. Persistence
To persist Joda Time properties you need to use the Hibernate UserType implementations supplied by the [Joda-Time Hibernate Support|http://joda-time.sourceforge.net/contrib/hibernate/index.html] library in the mapping block of your class. For example:
{code}
import org.joda.time.*
import org.joda.time.contrib.hibernate.*

class Person {
    String name
    LocalDate birthdate
    static mapping = {
    	birthdate type: PersistentLocalDate
    }
}
{code}
This even works with some of the special functionality in Grails. For example fields 'dateCreated' and 'lastUpdated' in a Grails domain object will be updated automatically by the framework. Such properties do not have to be java.util.Dates, the functionality works fine if they are org.joda.time.DateTime, for example.

h3. Multi-column UserTypes
To use multi-column types such as [PersistentDateTimeTZ|http://joda-time.sourceforge.net/contrib/hibernate/apidocs/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.html] you need to include explicit mapping of both column names. For example:
{code}
import org.joda.time.*
import org.joda.time.contrib.hibernate.*

class User {
    DateTime registered
    mapping {
        registered type: PersistentDateTimeTZ, {
            column name: "registered_timestamp"
            column name: "registered_zone"
        }
    }
}
{code}
You can use any name you like for the columns.

h2. Data Binding
The Joda-Time plugin adds automatic binding support for the following types...
 * [LocalTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalTime.html]
 * [LocalDate|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDate.html]
 * [LocalDateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDateTime.html]
 * [DateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTime.html]
 * [Duration|http://joda-time.sourceforge.net/api-release/org/joda/time/Duration.html]
 * [Period|http://joda-time.sourceforge.net/api-release/org/joda/time/Period.html]
 * [DateTimeZone|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeZone.html]
Properties can be bound to simple text fields or to picker controls (see below). Text fields are bound in a locale-sensitive manner (e.g. to enter a LocalDate in the en_GB locale the format is dd/MM/yy, in the en_US locale the format is MM/dd/yy). Alternatively formats can be defined per type in config using keys such as 'jodatime.format.org.joda.time.DateTime', 'jodatime.format.org.joda.time.LocalDate', etc. Using configured formats is partiularly useful when using rich UI type controls that may require a fixed format.

h2. Tag Libs
The plugin makes several new tags available:

h3. joda:datePicker, joda:timePicker and joda:dateTimePicker
These tags are based on the default g:datePicker tag and exhibit very similar functionality. However, they are designed to be used with Joda-Time typed properties. All the attributes are as-per g:datePicker except that 'value' and 'default' will expect either a [ReadablePartial|http://joda-time.sourceforge.net/api-release/org/joda/time/ReadablePartial.html] or [ReadableInstant|http://joda-time.sourceforge.net/api-release/org/joda/time/ReadableInstant.html] instance or a String in ISO8601 date/time format (such a String can be a partial representation depending on the particular tag and the precision attribute). The other difference from g:datePicker is that the 'second' precision is supported (although like g:datePicker the tags use 'minute' as the default precision).

h3. joda:periodPicker
This tag renders an input control for a [Duration|http://joda-time.sourceforge.net/api-release/org/joda/time/Duration.html] or [Period|http://joda-time.sourceforge.net/api-release/org/joda/time/Period.html] value. Attributes are:
{table}
*Name* | *Description* | *Optional* | *Default*
name | The name for the backing form field (as per g:textField, etc.) | N | None
id | The id for the backing form field. | Y | name
value | An instance of Duration or Period. | Y | new Period()
fields | Comma separated list of the fields to provide input elements for. Valid values are "years", "months", "weeks", "days", "hours", "minutes", "seconds" and "millis". | Y | "hours,minutes,seconds" or as defined by the config value "jodatime.periodpicker.default.fields"
{table}

Labels for each field can be overridden in messages.properties using the keys org.joda.time.DurationFieldType.hours, org.joda.time.DurationFieldType.minutes, etc.

h3. joda.dateTimeZoneSelect
This tag renders a select for [DateTimeZone|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeZone.html] values. It is very similar to g:timeZoneSelect.
{table}
*Name* | *Description* | *Optional* | *Default*
name | The name for the backing form field (as per g:textField, etc.) | N | None
id | The id for the backing form field. | Y | name
value | An instance of DateTimeZone. | Y | DateTimeZone.getDefault()
{table}

h3. joda:format
This tag formats a [ReadableInstant|http://joda-time.sourceforge.net/api-release/org/joda/time/ReadableInstant.html] or [ReadablePartial|http://joda-time.sourceforge.net/api-release/org/joda/time/ReadablePartial.html] instance for the page. Attributes are:
{table}
*Name* | *Description* | *Optional* | *Default*
value | An instance of RedablePartial or ReadableInstant | Y | new DateTime()
locale | The Locale to use for formatting | Y | request locale
zone | The DateTimeZone to use for formatting | Y | DateTimeZone.getDefault()
chronology | The Chronology to use for formatting | Y | ISOChronology
pattern | The pattern to use to render the date. This attribute cannot be used in conjunction with 'style'. See DateTimeFormat for more information | Y | Config value 'jodatime.format.org.joda.time.DateTime (or equivalent for other types).
style | The style to use to render the date. Composed of two characters S, M, L or - the first representing the date portion and the last the time portion. Using - means that portion is not output. This attribute cannot be used in conjunction with 'pattern'. | Y | "MM" for date/time values, "M-" for date values or "-M" for time values.
{table}

h3. joda:inputPattern
This tag outputs the expected input pattern for a given type. It can be used for example to output a label to go alongside a text field or to configure a rich input control such as the [Grails UI|http://grails.org/plugin/grails-ui] gui:datePicker tag.
*Name* | *Description* | *Optional* | *Default*
type | The type to output the pattern for | Y | DateTime
locale | The locale for the pattern | Y | Current request locale

h2. Scaffolding
The Joda-Time plugin enhances Grails' dynamic scaffolding so it is compatible with domain classes with the following types...
 * [LocalTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalTime.html]
 * [LocalDate|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDate.html]
 * [LocalDateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDateTime.html]
 * [DateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTime.html]
 * [Duration|http://joda-time.sourceforge.net/api-release/org/joda/time/Duration.html]
 * [Period|http://joda-time.sourceforge.net/api-release/org/joda/time/Period.html]
 * [DateTimeZone|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeZone.html]

To install scaffolding templates use the command:
{code}
grails install-joda-time-templates
{code}

Create and edit views use the joda:dateTimePicker, joda:datePicker, joda:timePicker or joda:periodPicker (see above) as appropriate. Columns on list views are sortable.

h2. JSON and XML Rendering
The plugin registers JSON and XML converters for...
 * [LocalTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalTime.html]
 * [LocalDate|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDate.html]
 * [LocalDateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/LocalDateTime.html]
 * [DateTime|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTime.html]
 * [DateTimeZone|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeZone.html]

h2. Dynamic Methods
The plugin adds the following dynamic methods:

h3. format(String) (ReadableInstant, ReadablePartial and sub-types)
Returns a String representation of the object according to the specified pattern. See [DateTimeFormat|http://joda-time.sourceforge.net/api-release/org/joda/time/format/DateTimeFormat.html] for description of patterns.

h3. negative(), multiply(), div() (Days, Hours, Minutes, Months, Seconds, Weeks, Years)
Provides compatibility with Groovy mathematical operators for these classes.

h3. DateTimeUtils.withCurrentMillisFixed(long, Closure)
A scoped version of [setCurrentMillisFixed|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeUtils.html#setCurrentMillisFixed(long)].

h3. DateTimeUtils.withCurrentMillisOffset(long, Closure)
A scoped version of [setCurrentMillisOffset|http://joda-time.sourceforge.net/api-release/org/joda/time/DateTimeUtils.html#setCurrentMillisOffset(long)].

h2. Integrating With Other Plugins

h3. [Grails UI|http://grails.org/plugin/grails-ui]
The Grails-UI Plugin's datePicker tag works quite well with Joda-Time types such as DateTime, LocalDate or LocalDateTime. The tag's formatString argument can easily be set with joda:inputPattern (see above). The value attribute needs to be converted to a java.util.Date. Examples of use might be:

A DateTime property with time input:
{code}
<gui:datePicker id="myDateTimeProperty" value="${myInstance?.myDateTimeProperty?.toDate()}" includeTime="true" formatString="${joda.inputPattern()}"/>
{code}

A LocalDate property:
{code}
<gui:datePicker id="myLocalDateProperty" value="${myInstance?.myLocalDateProperty?.toDateTime()?.toDate()}" formatString="${joda.inputPattern(type: org.joda.time.LocalDate)}"/>
{code}

h2. Known Issues
 * In Grails 1.1.1 there is an issue with auto-timestamping using Joda Time properties. On save GroovyRuntimeException is thrown with the message "Could not find matching constructor for: java.lang.Object(java.lang.Long)". The workaround is to declare the fields non-lazy (GORM is mistaking them for one-to-one associations and wrapping a lazy proxy around them - see [GRAILS-4689|http://jira.codehaus.org/browse/GRAILS-4689]), e.g.
{code}
DateTime dateCreated
DateTime lastUpdated

static mapping = {
	dateCreated type: PersistentDateTime, lazy: false
	lastUpdated type: PersistentDateTime, lazy: false
}
{code}
 * It is currently not possible to do certain types of criteria query with DateTime properties mapped using PersistentLocalDateTimeTZ (or any other multi-column Hibernate UserType). Aggregate functions (max, min, avg, count, etc.) in projections will not work on such properties and neither will the 'between' criterion.

h2. Release Notes
h4. 0.5
 * Adds JSON and XML rendering support.
 * Adds binding and scaffolding support for Duration and Period.
 * Fixes compatibility problem with Grails 1.1 and 1.1.1.
h4. 0.4.3
 * No longer automatically tries to install scaffolding templates (use grails install-joda-time-templates instead).
 * list.gsp and show.gsp templates are not used when application's Grails version is 1.2+ as they are not needed.
h4. 0.4.2
 * No longer tries to reinstall templates that are already installed.
 * Adds DateTimeUtils.withCurrentTimestampFixed and withCurrentTImestampOffset
 * Supports all Groovy mathematical operators on Joda Seconds, Minutes, Hours, Days, Months, Years, etc. classes.
h4. 0.4.1
 * Fixes template installation on Windows machines where Ant's patch task does not work.
h4. 0.4
 * Fixes corrupted template files from previous version.
 * Fixes template compatibility with Grails 1.0.4.
h4. 0.3
 * Adds the dynamic format(String) method on ReadableInstant and ReadablePartial.
 * Fixes installation script for Grails 1.0.4.
 * Plugin requires Grails 1.0.4 + as earlier versions don't support registering custom editors.
h4. 0.2
 * Fixes bug where registration of structured date/time editor overrides registration of text -> date/time editor.
h4. 0.1
 * Initial release

h2. Contact

If you have questions, comments or suggestions please contact me via the [Grails user mailing list|http://www.grails.org/Mailing+lists] or directly at [rob@energizedwork.com|mailto:rob@energizedwork.com].
Please raise bugs against the [Grails-JodaTime|http://jira.codehaus.org/browse/GRAILSPLUGINS/component/14011] component on [JIRA|http://jira.codehaus.org/browse/GRAILSPLUGINS].
Plugin source code is hosted on [GitHub|http://github.com/robfletcher/grails-joda-time]
